// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/confeitaria.dart';
import 'models/produto.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8090015368424347737),
      name: 'Confeitaria',
      lastPropertyId: const obx_int.IdUid(11, 3584686536999183356),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3705971695738329843),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6918548082578590992),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4034517056831969425),
            name: 'telefone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4053733703762005973),
            name: 'cep',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7870764373504976175),
            name: 'rua',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2134758893845926071),
            name: 'numero',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 559159511697327772),
            name: 'bairro',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 238481950812414442),
            name: 'cidade',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2221742568803308787),
            name: 'estado',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1957201423880023647),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3584686536999183356),
            name: 'longitude',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'produtos', srcEntity: 'Produto', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3054078692452058754),
      name: 'Produto',
      lastPropertyId: const obx_int.IdUid(6, 1446312968889838191),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8082923295366143456),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1514747072578815911),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 367428124142507889),
            name: 'descricao',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2746778095812500198),
            name: 'valor',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4632404198868097861),
            name: 'imagens',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1446312968889838191),
            name: 'confeitariaId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7560293169363909633),
            relationTarget: 'Confeitaria')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 3054078692452058754),
      lastIndexId: const obx_int.IdUid(1, 7560293169363909633),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Confeitaria: obx_int.EntityDefinition<Confeitaria>(
        model: _entities[0],
        toOneRelations: (Confeitaria object) => [],
        toManyRelations: (Confeitaria object) => {
              obx_int.RelInfo<Produto>.toOneBacklink(6, object.id,
                  (Produto srcObject) => srcObject.confeitaria): object.produtos
            },
        getId: (Confeitaria object) => object.id,
        setId: (Confeitaria object, int id) {
          object.id = id;
        },
        objectToFB: (Confeitaria object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          final telefoneOffset = fbb.writeString(object.telefone);
          final cepOffset = fbb.writeString(object.cep);
          final ruaOffset = fbb.writeString(object.rua);
          final numeroOffset = fbb.writeString(object.numero);
          final bairroOffset = fbb.writeString(object.bairro);
          final cidadeOffset = fbb.writeString(object.cidade);
          final estadoOffset = fbb.writeString(object.estado);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addOffset(2, telefoneOffset);
          fbb.addOffset(3, cepOffset);
          fbb.addOffset(4, ruaOffset);
          fbb.addOffset(5, numeroOffset);
          fbb.addOffset(6, bairroOffset);
          fbb.addOffset(7, cidadeOffset);
          fbb.addOffset(8, estadoOffset);
          fbb.addFloat64(9, object.latitude);
          fbb.addFloat64(10, object.longitude);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final telefoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final cepParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final ruaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final numeroParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final bairroParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final cidadeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final estadoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final latitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final longitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final object = Confeitaria(
              id: idParam,
              nome: nomeParam,
              telefone: telefoneParam,
              cep: cepParam,
              rua: ruaParam,
              numero: numeroParam,
              bairro: bairroParam,
              cidade: cidadeParam,
              estado: estadoParam,
              latitude: latitudeParam,
              longitude: longitudeParam);
          obx_int.InternalToManyAccess.setRelInfo<Confeitaria>(
              object.produtos,
              store,
              obx_int.RelInfo<Produto>.toOneBacklink(
                  6, object.id, (Produto srcObject) => srcObject.confeitaria));
          return object;
        }),
    Produto: obx_int.EntityDefinition<Produto>(
        model: _entities[1],
        toOneRelations: (Produto object) => [object.confeitaria],
        toManyRelations: (Produto object) => {},
        getId: (Produto object) => object.id,
        setId: (Produto object, int id) {
          object.id = id;
        },
        objectToFB: (Produto object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          final descricaoOffset = fbb.writeString(object.descricao);
          final imagensOffset = fbb.writeString(object.imagens);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addOffset(2, descricaoOffset);
          fbb.addFloat64(3, object.valor);
          fbb.addOffset(4, imagensOffset);
          fbb.addInt64(5, object.confeitaria.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descricaoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final valorParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final imagensParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Produto(
              id: idParam,
              nome: nomeParam,
              descricao: descricaoParam,
              valor: valorParam,
              imagens: imagensParam);
          object.confeitaria.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.confeitaria.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Confeitaria] entity fields to define ObjectBox queries.
class Confeitaria_ {
  /// see [Confeitaria.id]
  static final id =
      obx.QueryIntegerProperty<Confeitaria>(_entities[0].properties[0]);

  /// see [Confeitaria.nome]
  static final nome =
      obx.QueryStringProperty<Confeitaria>(_entities[0].properties[1]);

  /// see [Confeitaria.telefone]
  static final telefone =
      obx.QueryStringProperty<Confeitaria>(_entities[0].properties[2]);

  /// see [Confeitaria.cep]
  static final cep =
      obx.QueryStringProperty<Confeitaria>(_entities[0].properties[3]);

  /// see [Confeitaria.rua]
  static final rua =
      obx.QueryStringProperty<Confeitaria>(_entities[0].properties[4]);

  /// see [Confeitaria.numero]
  static final numero =
      obx.QueryStringProperty<Confeitaria>(_entities[0].properties[5]);

  /// see [Confeitaria.bairro]
  static final bairro =
      obx.QueryStringProperty<Confeitaria>(_entities[0].properties[6]);

  /// see [Confeitaria.cidade]
  static final cidade =
      obx.QueryStringProperty<Confeitaria>(_entities[0].properties[7]);

  /// see [Confeitaria.estado]
  static final estado =
      obx.QueryStringProperty<Confeitaria>(_entities[0].properties[8]);

  /// see [Confeitaria.latitude]
  static final latitude =
      obx.QueryDoubleProperty<Confeitaria>(_entities[0].properties[9]);

  /// see [Confeitaria.longitude]
  static final longitude =
      obx.QueryDoubleProperty<Confeitaria>(_entities[0].properties[10]);

  /// see [Confeitaria.produtos]
  static final produtos =
      obx.QueryBacklinkToMany<Produto, Confeitaria>(Produto_.confeitaria);
}

/// [Produto] entity fields to define ObjectBox queries.
class Produto_ {
  /// see [Produto.id]
  static final id =
      obx.QueryIntegerProperty<Produto>(_entities[1].properties[0]);

  /// see [Produto.nome]
  static final nome =
      obx.QueryStringProperty<Produto>(_entities[1].properties[1]);

  /// see [Produto.descricao]
  static final descricao =
      obx.QueryStringProperty<Produto>(_entities[1].properties[2]);

  /// see [Produto.valor]
  static final valor =
      obx.QueryDoubleProperty<Produto>(_entities[1].properties[3]);

  /// see [Produto.imagens]
  static final imagens =
      obx.QueryStringProperty<Produto>(_entities[1].properties[4]);

  /// see [Produto.confeitaria]
  static final confeitaria =
      obx.QueryRelationToOne<Produto, Confeitaria>(_entities[1].properties[5]);
}
